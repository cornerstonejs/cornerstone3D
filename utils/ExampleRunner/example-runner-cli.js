#! /usr/bin/env node

/* eslint-disable */
var { program } = require('commander');
var path = require('path');
var shell = require('shelljs');
var examples = {};
var webpackConfigPath = path.join(
  __dirname,
  './webpack-AUTOGENERATED.config.js'
);
var distDir = path.join(__dirname, 'dist');
var buildConfig = require('./template-config.js');
const rootPath = path.resolve(path.join(__dirname, '../..'));

program
  .option('-c, --config [file.js]', 'Configuration file')
  .option('--no-browser', 'Do not open the browser')
  .parse(process.argv);

const options = program.opts();
//var configFilePath = path.join(process.cwd(), options.config.replace(/\//g, path.sep));
//var configuration = require(configFilePath);

function getSplittedPath(filePath) {
  var a = filePath.split('/');
  var b = filePath.split('\\');
  return a.length > b.length ? a : b;
}

function validPath(str) {
  return str.replace(/\\\\/g, '/');
}

// from https://github.com/systemed/iD/blob/1e78ee5c87669aac407c69493f3f532c823346ef/js/id/util.js#L97-L115
function levenshteinDistance(a, b) {
  if (a.length === 0) return b.length;
  if (b.length === 0) return a.length;
  const matrix = [];
  for (let i = 0; i <= b.length; i++) {
    matrix[i] = [i];
  }
  for (let j = 0; j <= a.length; j++) {
    matrix[0][j] = j;
  }
  for (let i = 1; i <= b.length; i++) {
    for (let j = 1; j <= a.length; j++) {
      if (b.charAt(i - 1) === a.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1, // substitution
          Math.min(
            matrix[i][j - 1] + 1, // insertion
            matrix[i - 1][j] + 1
          )
        ); // deletion
      }
    }
  }
  return matrix[b.length][a.length];
}

// ----------------------------------------------------------------------------
// Find examples
// ----------------------------------------------------------------------------

const configuration = {
  examples: [
    { path: 'packages/core/examples', regexp: 'index.ts' },
    { path: 'packages/tools/examples', regexp: 'index.ts' },
    {
      path: 'packages/streaming-image-volume-loader/examples',
      regexp: 'index.ts',
    },
    {
      path: 'packages/dicomImageLoader/examples',
      regexp: 'index.ts',
    },
  ],
};

if (configuration.examples) {
  var filterExamples = [].concat(program.args).filter((i) => !!i);

  var buildExample = filterExamples.length === 1;
  var exampleCount = 0;
  var closestExampleName = null;
  var closestSimilarity = 100;
  var filteredExampleCorrectCase = null;

  console.log('\n=> Extract examples\n');
  configuration.examples.forEach(function (entry) {
    const regexp = entry.regexp
      ? new RegExp(entry.regexp)
      : /example\/index.ts$/;
    let fullPath = path.join(rootPath, entry.path ? entry.path : entry);

    console.warn('', fullPath);

    // Single example use case
    examples[fullPath] = {};
    var currentExamples = examples[fullPath];
    shell.cd(fullPath);
    shell
      .find('.')
      .filter(function (file) {
        return file.match(regexp);
      })
      .forEach(function (file) {
        var fullPath = getSplittedPath(file);
        var exampleName = fullPath.pop();

        while (['index.ts', 'example'].indexOf(exampleName) !== -1) {
          // make sure the matching of the name is not case sensitive
          exampleName = fullPath.pop();
        }

        if (
          !buildExample ||
          filterExamples
            .map((i) => i.toLowerCase())
            .indexOf(exampleName.toLowerCase()) !== -1
        ) {
          currentExamples[exampleName] = './' + file;
          exampleCount++;
          console.log('  - Found example: ' + exampleName);
          filteredExampleCorrectCase = exampleName;
        } else {
          // store the similarity of the example name to the filter name
          // so that we can suggest the user the correct name later
          var similarity = Math.max(
            0,
            levenshteinDistance(exampleName, filterExamples[0])
          );

          if (similarity < closestSimilarity) {
            closestExampleName = exampleName;
            closestSimilarity = similarity;
          }
        }
      });
  });

  if (exampleCount === 0 && closestExampleName) {
    console.log(
      `\n=> Error: Did not find any examples matching ${filterExamples[0]}; Did you mean \x1b[32m${closestExampleName}\x1b[0m?\n`
    );

    process.exit(1);
  }

  if (exampleCount === 0) {
    examples = null;
    if (buildExample) {
      console.error(
        `\n=> Error: Did not find any examples matching ${filterExamples[0]}`
      );
      process.exit(1);
    }
  }

  // say name of running example
  console.log(`\n=> Running examples ${filterExamples.join(', ')}\n`);

  // run the build for dicom image loader
  const currentWD = process.cwd();
  // run the build for dicom image loader
  shell.cd('../../dicomImageLoader');
  shell.exec(`yarn run webpack:dynamic-import`);
  shell.cd(currentWD);

  if (buildExample) {
    var exBasePath = null;
    const exampleName = filteredExampleCorrectCase;
    Object.keys(examples).forEach((exampleBasePath) => {
      if (examples[exampleBasePath][exampleName]) {
        exBasePath = exampleBasePath;
      }
    });

    const conf = buildConfig(
      exampleName,
      validPath(examples[exBasePath][exampleName]),
      distDir,
      validPath(rootPath),
      validPath(exBasePath)
    );

    // console.log('conf', conf);
    shell.ShellString(conf).to(webpackConfigPath);

    shell.cd(exBasePath);
    shell.exec(
      `webpack serve --host 0.0.0.0 --progress --config ${webpackConfigPath}`
    );
  } else {
    console.log('=> To run an example:');
    console.log('  $ npm run example -- PUT_YOUR_EXAMPLE_NAME_HERE\n');
  }
}
