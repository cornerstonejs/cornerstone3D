#! /usr/bin/env node

/* eslint-disable */
var { program } = require('commander');
var path = require('path');
var shell = require('shelljs');
const fs = require('fs');
var buildConfig = require('./template-multiexample-config.js');
const buildExampleIndex = require('./build-example-index.js');
const rootPath = path.resolve(path.join(__dirname, '../..'));
var distDir = path.join(rootPath, '/.static-examples-playwright');
var webpackConfigPath = path.join(
  __dirname,
  './webpack-all-examples-AUTOGENERATED.config.js'
);
const playwrightTestFolder = path.join(__dirname, '../../tests');

if (!fs.existsSync(distDir)) {
  console.log('Creating directory: ' + distDir);
  fs.mkdirSync(distDir);
}

function validPath(str) {
  return str.replace(/\\\\/g, '/');
}

program
  .option(
    '--build',
    'Build and write examples to disk, rather than using the Webpack Dev Server'
  )
  .option(
    '--fromRoot',
    'A flag to set that this is being run from the root of the repo'
  )
  .parse(process.argv);

// ----------------------------------------------------------------------------
// Find examples
// ----------------------------------------------------------------------------

const configuration = {
  examples: [
    { path: 'packages/core/examples', regexp: 'index.ts' },
    { path: 'packages/tools/examples', regexp: 'index.ts' },
    {
      path: 'packages/dicomImageLoader/examples',
      regexp: 'index.ts',
    },
    {
      path: 'packages/nifti-volume-loader/examples',
      regexp: 'index.ts',
    },
    {
      path: 'packages/adapters/examples',
      regexp: 'index.ts',
    },
  ],
};

const allExamplePaths = configuration.examples.flatMap((example) => {
  // Join with rootPath to get absolute path
  const absolutePath = path.join(rootPath, example.path);

  if (!fs.existsSync(absolutePath)) {
    console.debug(`Warning: Example path does not exist: ${absolutePath}`);
    return [];
  }

  const folders = fs.readdirSync(absolutePath);
  return folders
    .filter((folder) => {
      const indexPath = path.join(absolutePath, folder, 'index.ts');
      return fs.existsSync(indexPath);
    })
    .map((folder) => path.join(absolutePath, folder, 'index.ts'));
});

// for some reason the esm build of the dicom image loader
// requires the core to be built first and cannot link it
// shell.cd('../../core');
// shell.exec(`yarn run build:esm`);

// // run the build for dicom image loader
// shell.cd('../../dicomImageLoader');
// shell.exec(`yarn run build:esm`);
// shell.cd(currentWD);

// list all the files inside playwrightTestFolder that ends with .spec.ts
let exampleNames = fs
  .readdirSync(playwrightTestFolder)
  .filter((file) => file.endsWith('.spec.ts'));

// remove the .spec.ts from the exampleNames
exampleNames = exampleNames.map((name) => name.replace('.spec.ts', ''));

// for each file name, get the full path by looking inside the examplePaths
const examplePaths = exampleNames.map((name) => {
  const path = allExamplePaths.find((path) =>
    path.toLowerCase().includes(name.toLowerCase())
  );
  return path;
});

const conf = buildConfig(
  exampleNames,
  examplePaths,
  distDir,
  validPath(rootPath)
);

shell.ShellString(conf).to(webpackConfigPath);

const exampleIndexHTML = buildExampleIndex(
  exampleNames,
  examplePaths,
  validPath(rootPath)
);
shell.ShellString(exampleIndexHTML).to(path.join(distDir, 'index.html'));

// You can run this with --no-cache after the serve to prevent caching
// which can help when doing certain types of development.
shell.exec(
  `node node_modules/webpack/bin/webpack.js --progress --config ${webpackConfigPath}`
);
